{"version":3,"sources":["Component/cell.js","Component/grid.js","Component/solver.js","Component/Square.js","Component/SudukoBoard.js","App.js","serviceWorker.js","index.js"],"names":["Cell","row","col","value","this","parseInt","possibleValues","Array","prototype","flatten","concat","apply","EMPTY","temp","i","push","join","Grid","currentRow","input","rows","idx","length","output","j","toString","grids","sameSubGridAs","_columns","forEach","cell","columns","subgrid","index","x","startRow","startCol","subGridRow","filter","c","some","peers","from","Set","sameColAs","sameRowAs","map","DIGITS","valueOfCell","possibleValuesOfCell","isUnsolved","Solver","grid","guesses","_solvedCells","_initPossibleValues","_findCellsWithOnePossibleValue","_findUniqueValuesInUnits","isSolved","_search","unsolved","sort","y","numSolved","_setValueForCell","inconsistency","resetPossibilities","splice","cells","peerValues","d","includes","p","indexOf","_removeValueFromPeers","console","log","_findUniquePossibiltyInUnit","subgrids","sg","units","unit","unsolvedCell","unique","otherCellsPossValues","Square","evt","target","props","onCellValueChange","type","maxLength","onChange","fireOnChange","bind","Component","SudukoBoard","puzzle","className","key","App","state","solve","setState","toFlatString","onCellValueEdited","onClick","clearAll","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a06b7209.chunk.js","sourcesContent":["export default class Cell {\r\n    constructor(row, col, value) {\r\n        this.value = value || 0;\r\n        this.row = row;\r\n        this.col = col;\r\n        if (value === \".\") {\r\n            this.value = 0;\r\n        } else {\r\n            this.value = parseInt(value, 10);\r\n        }\r\n\r\n       this.possibleValues = [];\r\n    }\r\n\r\n    toString() {\r\n        return this.value || \".\";\r\n    }\r\n}\r\n","import Cell from \"./cell\";\r\n\r\n/*\r\n    [[1, 2, 3], [4, 5, 6]].flatten()\r\n\r\n    [1, 2, 3, 4, 5, 6]\r\n*/\r\nArray.prototype.flatten = function() {\r\n    return [].concat.apply([], this);\r\n};\r\n\r\nconst EMPTY = (() => {\r\n    let temp = [];\r\n    for (let i = 0; i < 81; i++) {\r\n        temp.push(\".\");\r\n    }\r\n    return temp.join(\"\");\r\n})();\r\n\r\nexport default class Grid {\r\n    constructor(input = EMPTY) {\r\n        let currentRow;\r\n        this.rows = [];\r\n\r\n        for (let idx = 0; idx < input.length; idx++) {\r\n            if (idx % 9 === 0) {\r\n                currentRow = [];\r\n                this.rows.push(currentRow);\r\n            }\r\n\r\n            currentRow.push(\r\n                new Cell(this.rows.length - 1, currentRow.length, input[idx])\r\n            );\r\n        }\r\n    }\r\n\r\n    toString() {\r\n        \r\n        let output = \"\";\r\n        for (let i = 0; i < this.rows.length; i++) {\r\n            if (i !== 0 && i % 3 === 0) {\r\n                output += \"---------+---------+---------\\n\";\r\n            }\r\n\r\n            let currentRow = this.rows[i];\r\n            for (let j = 0; j < currentRow.length; j++) {\r\n                if (j !== 0 && j % 3 === 0) {\r\n                    output += \"|\";\r\n                }\r\n\r\n                output += \" \" + currentRow[j].toString() + \" \";\r\n            }\r\n\r\n            output += \"\\n\";\r\n        }\r\n\r\n        return output;\r\n    }\r\n\r\n    subgrids() {\r\n        if (!this.grids) {\r\n            this.grids = [];\r\n            for (let i = 0; i < 9; i += 3) {\r\n                for (let j = 0; j < 9; j += 3) {\r\n                    this.grids.push(this.sameSubGridAs(new Cell(i, j)));\r\n                }\r\n            }\r\n        }\r\n\r\n        return this.grids;\r\n    }\r\n\r\n    columns() {\r\n        if (!this._columns) {\r\n            this._columns = [];\r\n            for (let i = 0; i < 9; i++) {                      // columns\r\n                this._columns.push([]);\r\n            }\r\n            this.rows.forEach(function(row) {\r\n                row.forEach(function(cell, idx) {                \r\n                    this._columns[idx].push(cell);\r\n                }, this);\r\n            }, this);\r\n        }\r\n\r\n        return this._columns;\r\n    }\r\n\r\n    sameRowAs(cell) {\r\n        return this.rows[cell.row];\r\n    }\r\n\r\n    sameColAs(cell) {\r\n        return this.columns()[cell.col];\r\n    }\r\n\r\n    sameSubGridAs(cell) {\r\n        /*\r\n            Get all the cells in the same \"sub grid\" as the given cell. e.g.\r\n            for the cell \"c\" below the cells in the \"same_sub_grid\" (which are\r\n            marked x below) are returned along with the argument cell.\r\n\r\n            x x x | . . . | . . .\r\n            x c x | . . . | . . .\r\n            x x x | . . . | . . .\r\n            ------+-------+------\r\n            . . . | . . . | . . .\r\n            . . . | . . . | . . .\r\n            . . . | . . . | . . .\r\n            ------+-------+------\r\n            . . . | . . . | . . .\r\n            . . . | . . . | . . .\r\n            . . . | . . . | . . .\r\n        */\r\n\r\n        // row:\r\n        // 0 - 2 -> 0\r\n        // 3 - 5 -> 3\r\n        // 6 - 8 -> 5\r\n\r\n        // col:\r\n        // same as above\r\n        if (!cell.subgrid) {\r\n            let index = function(x) {\r\n                if (x <= 2) {\r\n                    return 0;\r\n                } else if (x <= 5) {\r\n                    return 3;\r\n                } else {\r\n                    return 6;\r\n                }\r\n            };\r\n\r\n            let startRow = index(cell.row),\r\n                startCol = index(cell.col),\r\n                subgrid = [];\r\n            for (let i = startRow; i < startRow + 3; i++) {\r\n                let row = this.rows[i],\r\n                    subGridRow = [];\r\n                for (let j = startCol; j < startCol + 3; j++) {\r\n                    subGridRow.push(row[j]);\r\n                }\r\n\r\n                subgrid.push(subGridRow);\r\n            }\r\n            cell.subgrid = subgrid;\r\n        }\r\n\r\n        return cell.subgrid;\r\n    }\r\n\r\n    unsolved() {\r\n        return this.rows.flatten().filter(c => c.value === 0);\r\n    }\r\n\r\n    isSolved() {\r\n        return !this.rows.flatten().some(x => x.value === 0);\r\n    }\r\n\r\n    peers(cell) {\r\n        /*\r\n            Get the peers for the cell.  The peers for the cell \"c\" are pictorially\r\n            represented below by the cells marked \"x\"\r\n\r\n            x x x | . . . | . . .\r\n            x c x | x x x | x x x\r\n            x x x | . . . | . . .\r\n            ------+-------+------\r\n            . x . | . . . | . . .\r\n            . x . | . . . | . . .\r\n            . x . | . . . | . . .\r\n            ------+-------+------\r\n            . x . | . . . | . . .\r\n            . x . | . . . | . . .\r\n            . x . | . . . | . . .\r\n        */\r\n        if (!cell.peers) {\r\n            cell.peers = Array.from(\r\n                new Set(\r\n                    this.sameColAs(cell)\r\n                        .concat(this.sameRowAs(cell))\r\n                        .concat(this.sameSubGridAs(cell).flatten())\r\n                        .filter(x => x !== cell)\r\n                )\r\n            );\r\n        }\r\n\r\n        return cell.peers;\r\n    }\r\n\r\n    toFlatString() {\r\n        return this.rows\r\n            .flatten()\r\n            .map(x => x.toString())\r\n            .join(\"\");\r\n    }\r\n}\r\n","const DIGITS = [1, 2, 3, 4, 5, 6, 7, 8, 9];\r\n\r\n// These are a couple of useful map functions, pulling them up here\r\n// speeds things up.\r\nconst valueOfCell = cell => cell.value,\r\n    possibleValuesOfCell = cell => cell.possibleValues;\r\n\r\n// filter unsolved cells out of a list cells.\r\nconst isUnsolved = cell => cell.value === 0;\r\n\r\nexport default class Solver {\r\n    constructor(grid) {\r\n    \r\n        this.grid = grid;\r\n        this.guesses = 0;\r\n        this._solvedCells = [];\r\n    }\r\n\r\n    solve() {\r\n    \r\n        // work out what the set of possible values is for each unsolve cell.\r\n        this._initPossibleValues();\r\n        // if there are any with only one possible value, set it.\r\n        this._findCellsWithOnePossibleValue();\r\n        // find any cells that have a possible value that doesn't occur\r\n        // anywhere else in the column, row or subgrid it's in\r\n        this._findUniqueValuesInUnits();\r\n        if (!this.grid.isSolved()) {\r\n            // this is a more tricky puzzle, so start searching for a solution.\r\n            this._search();\r\n        }\r\n    }\r\n\r\n    _search() {\r\n\r\n        // pick the cell with least possible values (more chance of guessing correctly)\r\n        const cell = this.grid.unsolved().sort((x, y) => {\r\n            const xVal = x.possibleValues.length * 100 + (x.row + x.col),\r\n                yVal = y.possibleValues.length * 100 + (y.row + y.col);\r\n\r\n            return xVal - yVal;\r\n        })[0];\r\n\r\n        for (let value of cell.possibleValues) {\r\n            // remember how many cells we had solved before we begin incase\r\n            // we need to unwind\r\n            let numSolved = this._solvedCells.length;\r\n            this.guesses += 1;\r\n\r\n            try {\r\n                this._setValueForCell(cell, value);\r\n                if (!this.grid.isSolved()) {\r\n                    // no luck, keep looking...\r\n                    this._search();\r\n                }\r\n            } catch (inconsistency) {\r\n                // here's the back tracking part, we've ended up in a position where we\r\n                // can't progress, so before we try another value, undo all the values\r\n                // we set since the last guess.\r\n                let resetPossibilities = [];\r\n                this._solvedCells\r\n                    .splice(numSolved, this._solvedCells.length - numSolved)\r\n                    .forEach(cell => {\r\n                        cell.value = 0;\r\n                        resetPossibilities.push(cell);\r\n                        resetPossibilities = resetPossibilities.concat(\r\n                            this.grid.peers(cell)\r\n                        );\r\n                    }, this);\r\n\r\n                this._initPossibleValues(\r\n                    new Set(resetPossibilities.filter(isUnsolved))\r\n                );\r\n            }\r\n        }\r\n        if (!this.grid.isSolved()) {\r\n            // If we get here then we're also stuck since we haven't found a solution despite trying\r\n            // all possible values for a cell.\r\n            throw \"Tried all values for this cell  [\" +\r\n                cell.row +\r\n                \", \" +\r\n                cell.col +\r\n                \"]\" +\r\n                cell.possibleValues;\r\n        }\r\n    }\r\n\r\n    _initPossibleValues(cells) {\r\n        /*\r\n            Initialise the possible values for the provided list of cells or\r\n            all the unsolved cells in the grid if no list was provided.\r\n\r\n            To do this we collect the \"peers\" for each cell (cells not marked . for the cell c):\r\n\r\n            x x x | . . . | . . .\r\n            5 c x | x x 2 | x 9 x\r\n            x x 3 | . . . | . . .\r\n            ------+-------+------\r\n            . x . | . . . | . . .\r\n            . x . | . . . | . . .\r\n            . x . | . . . | . . .\r\n            ------+-------+------\r\n            . x . | . . . | . . .\r\n            . 7 . | . . . | . . .\r\n            . x . | . . . | . . .\r\n\r\n            Remove from the peers any unsolved cells, then exclude from the list 1..9 any\r\n            numbers already present in the list of solved peers. e.g. in the above grid assuming\r\n            that any cell containing an x or a number is a peer of c and that the cells containing\r\n            the numbers are solved then the possible values for \"c\" are:\r\n\r\n            [1, 2, 3, 4, 5, 6, 7, 8, 9] - [5, 3, 2, 9, 7] = [8, 1, 4, 6]\r\n        */\r\n        (cells || this.grid.unsolved()).forEach(cell => {\r\n            let peerValues = this.grid.peers(cell).map(valueOfCell),\r\n                possibleValues = DIGITS.filter(\r\n                    d => !peerValues.includes(d)\r\n                );\r\n            cell.possibleValues = possibleValues;\r\n        });\r\n    }\r\n\r\n    _removeValueFromPeers(cell) {\r\n        // Summary:\r\n        //  Remove the value of cell from the possible values of\r\n        //  it's peers.\r\n        this.grid\r\n            .peers(cell)\r\n            .filter(isUnsolved)\r\n            .forEach(p => {\r\n                const idx = p.possibleValues.indexOf(cell.value);\r\n                if (idx !== -1) {\r\n                    p.possibleValues.splice(idx, 1);\r\n                }\r\n\r\n                if (p.possibleValues.length === 0) {\r\n                    throw \"No possible values for cell [\" +\r\n                        p.row +\r\n                        \", \" +\r\n                        p.col +\r\n                        \"] \" +\r\n                        p.value;\r\n                }\r\n            });\r\n    }\r\n\r\n    _setValueForCell(cell, value) {\r\n        const peers = this.grid.peers(cell);\r\n\r\n        if (peers.some(x => x.value === value)) {\r\n            throw \"Tried to set a value that already exists in peers\";\r\n        }\r\n\r\n        cell.value = value;\r\n        cell.possibleValues = [];\r\n        this._solvedCells.push(cell);\r\n        this._removeValueFromPeers(cell);\r\n        this._findCellsWithOnePossibleValue(peers);\r\n        this._findUniqueValuesInUnits(cell);\r\n    }\r\n\r\n    _findCellsWithOnePossibleValue(cells) {\r\n        cells = cells || this.grid.unsolved();\r\n        cells.forEach(cell => {\r\n            if (cell.value === 0 && cell.possibleValues.length === 1) {\r\n                this._setValueForCell(cell, cell.possibleValues[0]);\r\n            }\r\n        });\r\n    }\r\n\r\n    _findUniqueValuesInUnits(cell) {\r\n        console.log(\"2\")\r\n        if (cell) {\r\n            [\r\n                this.grid.sameSubGridAs(cell).flatten(),\r\n                this.grid.sameColAs(cell),\r\n                this.grid.sameRowAs(cell)\r\n            ].forEach(this._findUniquePossibiltyInUnit, this);\r\n        } else {\r\n            let subGrids = this.grid.subgrids().map(sg => sg.flatten());\r\n\r\n            for (let units of [subGrids, this.grid.columns(), this.grid.rows]) {\r\n                for (let unit of units) {\r\n                    this._findUniquePossibiltyInUnit(unit);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    _findUniquePossibiltyInUnit(unit) {\r\n        console.log(\"4\")\r\n        let unsolved = unit.filter(isUnsolved);\r\n        unsolved.forEach(unsolvedCell => {\r\n            let unique,\r\n                otherCellsPossValues = unit\r\n                    .filter(c => c !== unsolvedCell && isUnsolved(c))\r\n                    .map(possibleValuesOfCell)\r\n                    .flatten();\r\n            //.reduce((a, b) => a.concat(b));\r\n\r\n            unique = unsolvedCell.possibleValues.filter(\r\n                x => !otherCellsPossValues.includes(x)\r\n            );\r\n            if (unique.length === 1) {\r\n                this._setValueForCell(unsolvedCell, unique[0]);\r\n            }\r\n        });\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class Square extends Component {\r\n    fireOnChange(evt) {\r\n        const value = evt.target.value;\r\n        if (parseInt(value, 10) || value === \"\") {\r\n          this.props.onCellValueChange(\r\n            this.props.row,\r\n            this.props.col,\r\n            evt.target.value\r\n          );\r\n        }\r\n      }\r\n    \r\n      render() {\r\n        const value = this.props.value;\r\n        return (\r\n          <input\r\n            type=\"text\"\r\n            value={value === 0 ? \"\" : value}\r\n            maxLength=\"1\"\r\n            onChange={this.fireOnChange.bind(this)}\r\n          />\r\n        );\r\n      }\r\n}\r\n","import React, { Component } from 'react'\r\nimport Square from \"./Square\";\r\nimport Grid from \"./grid\";\r\n\r\nexport default class SudukoBoard extends Component {\r\n  \r\n    render() {\r\n        debugger\r\n        console.log(\"qqqqqq \",this.props.puzzle);\r\n        const grid = new Grid(this.props.puzzle);\r\n    console.log(\"xxxxxx \",grid);\r\n        return (\r\n          <table className=\"sudoku\">\r\n            <tbody>\r\n              {grid.rows.map((row, idx) => {\r\n                return (\r\n                  <tr key={idx}>\r\n                    {row.map(cell => (\r\n                      <td key={cell.col}>\r\n                        <Square\r\n                          value={cell.value}\r\n                          row={cell.row}\r\n                          col={cell.col}\r\n                          onCellValueChange={this.props.onCellValueChange}\r\n                        />\r\n                      </td>\r\n                    ))}\r\n                  </tr>\r\n                );\r\n              })}\r\n            </tbody>\r\n          </table>\r\n        );\r\n      }\r\n}\r\n","import React,{Component} from 'react';\nimport Grid from \"./Component/grid\";\nimport Solver from \"./Component/solver\";\nimport SudukoBoard from \"./Component/SudukoBoard\";\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    \n    this.state = { puzzle: this.props.puzzle };\n  }\n\n  solve() {\n    const { puzzle } = this.state,\n      grid = new Grid(puzzle);\n      debugger\n      console.log(\"1\");\n    new Solver(grid).solve();\n    console.log(\"3\");\n    this.setState({ puzzle: grid.toFlatString() });\n  }\n\n  onCellValueEdited(row, col, value) {\n    const grid = new Grid(this.state.puzzle);\n\n    grid.rows[row][col].value = value;\n    // update the state with the new puzzle string\n    this.setState({ puzzle: grid.toFlatString() });\n  }\n\n  \n  clearAll() {\n    this.setState({ puzzle: this.props.puzzle });\n  }\n\n  render() {\n    console.log(\"vvvvvvvv \",this.state);\n    return (\n      <div className=\"game\">\n        <h1 className=\"headerName\">Sudoku Puzzle</h1>\n        <SudukoBoard\n\n           puzzle={this.state.puzzle}\n           onCellValueChange={this.onCellValueEdited.bind(this)}\n        />\n        <div className=\"buttons\">\n          <button onClick={() => this.solve()}>Solve It!</button>\n          <button onClick={() => this.clearAll()}>Clear</button>\n        </div>\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App puzzle=\"53..7....6..195....98....6.8...6...34..8.3..17...2...6.6....28....419..5....8..79\"  />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}